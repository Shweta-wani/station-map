{"version":3,"sources":["context/appContext.js","components/lineChart.jsx","components/selectionYear.jsx","components/label.jsx","components/selectionDom.jsx","components/selection.jsx","App.js","reportWebVitals.js","index.js"],"names":["AppContext","createContext","useApp","useContext","optionsData","value","text","AppContextProvider","children","useState","data","setData","textY","setTextY","type","setType","yearvalue","setYearValue","textX","setTextX","stationsId","setStationsId","setStationsName","stations","setStations","year","setYear","splitYear","yearString","Number","MESS_DATUM_BEGINN","toString","substring","useEffect","array","years","axios","post","credentials","withCredentials","then","result","startYear","EndYear","length","i","push","map","index","newYear","label","x","y","parseInt","catch","error","console","log","getFile","url","urlFiles","fileArray","fetch","response","json","includes","Stations_id","Stationsname","getStation","selectYear","changedYear","yearText","selectType","chagedType","chagedTextY","selectStaion","changedStationId","changedStationName","Provider","LineChart","height","width","numberOfHorizontalGuides","horizontalGuides","precision","FONT_SIZE","maximumXFromData","Math","max","e","maximumYFromData","minimumYFromData","min","svgRef","useRef","isDisable","setIsDisable","digits","parseFloat","toFixed","padding","chartWidth","chartHeight","dataPoints","element","points","el","join","Axis","fill","stroke","strokeWidth","XAxis","YAxis","HorizontalGuides","newChartHeight","startX","endX","Array","_","ratio","yCoordinate","Fragment","HorizontalGuidesPositive","HorizontalGuidesNigative","LabelsXAxis","style","fontSize","fontFamily","LabelsYAxis","parts","PARTS","newIndex","increaseParts","addIndex","activeIndex","LabelsYAxisNegative","LabelsYAxisPositive","Circle","circle","cx","cy","r","opacity","class","xmlns","viewBox","overflow","ref","x1","y1","x2","y2","className","onClick","current","currentScale","disabled","SelectionYear","LabelX","LabelY","SelectionDom","props","onChange","getType","aria-label","Selection","getValue","preventDefault","targetValue","target","targetText","options","selectedIndex","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5dd3ee4.chunk.js","sourcesContent":["import React, { createContext, useContext, useState, useEffect } from \"react\";\nimport axios from \"axios\";\n\nconst AppContext = createContext();\n\nexport function useApp() {\n    return useContext(AppContext);\n}\n\nconst optionsData = [\n    { value: \"JA_TT\", text: \"Lufttemperatur\" },\n    { value: \"JA_TN\", text: \"Lufttemperatur Minimums\" },\n    { value: \"JA_RR\", text: \"Niederschlagshoehe\" },\n    { value: \"JA_N\", text: \"Bedeckungsgrades\" },\n];\n\nfunction AppContextProvider({ children }) {\n    let [data, setData] = useState([]);\n    let [textY, setTextY] = useState(optionsData[0].text);\n    let [type, setType] = useState(optionsData[0].value);\n    let [yearvalue, setYearValue] = useState('');\n    let [textX, setTextX] = useState('');\n    let [stationsId, setStationsId] = useState(1);\n    let [stationsName, setStationsName] = useState('');\n    let [stations, setStations] = useState([]);\n    let [year, setYear] = useState([]);\n\n    // this function is work for sending station_id to the api \n    //and getting the response with json data according to the selected station\n    // also changes the year options according to the data in json file\n    function getFile() {\n        const url = \"http://localhost:8080/txtfile\";\n        let array = [];\n        let years = [];\n        axios\n            .post(\n                url,\n                { stationsId },\n                { credentials: 'include' },\n                { withCredentials: true }\n            )\n            .then(result => {\n                const startYear = splitYear(result.data[0]);\n                const EndYear = splitYear(result.data[result.data.length - 1]);\n                for (let i = startYear; i < EndYear; i += 9){\n                    years.push({\n                        value: i, text: `${i} - ${i+9}`\n                    })\n                }\n                result.data.map((value, index) => {\n                    const newYear = splitYear(value);\n                    if (newYear >= yearvalue && array.length < 10) {\n                        return (\n                            array.push(\n                                { label: newYear, x: array.length, y: value[type] }\n                            ))\n                    }\n                });\n                setData(array);\n                setYear(years);\n                yearvalue ? setTextX(`${yearvalue} - ${parseInt(yearvalue) + 9}`) :\n                setTextX(`${startYear} - ${startYear + 9}`);\n            })\n            .catch(error => {\n                console.log(\"Fetching data error\", error);\n            });\n        return array;\n    }\n\n    function splitYear(yearString) {\n        return Number(yearString.MESS_DATUM_BEGINN.toString().substring(0, 4));\n    }\n\n    // fetching the station data\n    function getStation() {\n        const url = \"http://localhost:8080/stationDetail\";\n        const urlFiles = \"http://localhost:8080/stationDetail/files\";\n        let array = [];\n        let fileArray = [];\n\n        fetch(urlFiles)\n            .then(response => response.json())\n            .then(result => {\n                fileArray.push(...result);\n            })\n            .catch(() => console.log(\"Can’t access \" + urlFiles + \" response. Blocked by browser?\"));\n\n        fetch(url)\n            .then(response => response.json())\n            .then(result => {\n                result.map((value, index) => {\n                    if (fileArray.includes(value.Stations_id)) {\n                        return (\n                            array.push(\n                                { value: value.Stations_id, text: value.Stationsname }\n                            ))\n                    }\n                });\n                setStations(array);\n            }).catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"));\n\n        return array;\n    }\n\n    function selectYear(changedYear, yearText) {\n        setYearValue(changedYear);\n        setTextX(yearText);\n    }\n    function selectType(chagedType, chagedTextY) {\n        setType(chagedType);\n        setTextY(chagedTextY);\n    }\n\n    function selectStaion(changedStationId, changedStationName) {\n        setStationsId(changedStationId);\n        setStationsName(changedStationName);\n        setYearValue(\"\");\n    }\n\n    useEffect(() => {\n        getFile();\n    }, [type, yearvalue, stationsId]);\n\n    useEffect(() => {\n        getStation();\n    }, []);\n\n    const value = {\n        data,\n        optionsData,\n        year,\n        stations,\n        textX,\n        textY,\n        selectYear,\n        selectType,\n        selectStaion\n    }\n\n    return (\n        <AppContext.Provider value={value}>\n            {children}\n        </AppContext.Provider>\n    );\n}\n\nexport default AppContextProvider;\n","import React, { useRef, useState } from \"react\";\nimport { useApp } from \"../context/appContext\";\nimport \"font-awesome/css/font-awesome.css\";\n\n//Line chart is creating with SVG \n// working mainly with padding, height(complete height), width\nconst LineChart = ({\n  height,\n  width,\n  horizontalGuides: numberOfHorizontalGuides,\n  precision\n}) => {\n  const { data } = useApp();\n  const FONT_SIZE = width / 25;\n  const maximumXFromData = Math.max(...data.map(e => e.x));\n  let maximumYFromData = Math.max(...data.map(e => e.y));\n  const minimumYFromData = Math.min(...data.map(e => e.y));\n  const svgRef = useRef();\n  const [isDisable, setIsDisable] = useState(true);\n\n  if (-minimumYFromData > maximumYFromData) {\n    maximumYFromData = -minimumYFromData;\n  }\n\n  const digits =\n    parseFloat(maximumYFromData.toString()).toFixed(precision).length + 1;\n\n  const padding = (FONT_SIZE + digits) * 3;\n  const chartWidth = width - padding * 2;\n  const chartHeight = height - padding * 2;\n\n  //Points x and y for the linechart\n  //calculating x point with dividing maximum value in x and adding padding and fontsize\n  //same with y points, just the difference to minus chart height for reversing it.\n  const dataPoints = data\n    .map(element => {\n      const x = (element.x * 2 / maximumXFromData) * chartWidth + padding + FONT_SIZE;\n      const y =\n        (chartHeight - (element.y / (maximumYFromData)) * chartHeight) / 2 + padding;\n      return ({ x, y })\n    });\n\n  // points for polyline\n  const points = dataPoints\n    .map(el => {\n      console.log()\n      return (`${el.x},${el.y}`)\n    })\n    .join(\" \");\n\n  const Axis = ({ points }) => (\n    <polyline fill=\"none\" stroke=\"green\" strokeWidth=\"5\" points={points} />\n  );\n\n  const XAxis = () => (\n    <Axis\n      points={`${padding + FONT_SIZE},${height - padding} ${width * 2},${height -\n        padding}`}\n    />\n  );\n\n  const YAxis = () => (\n    <Axis points={`${padding + FONT_SIZE},0 ${padding + FONT_SIZE},${height - padding}`} />\n  );\n\n  //horizontal guides is dividing in negative and positive guides\n  //working with number of horizontal lines\n  //adding 1 to positive guides for number 0\n\n  const HorizontalGuides = (newChartHeight) => {\n    const startX = padding + FONT_SIZE;\n    const endX = width * 2;\n\n    return new Array(numberOfHorizontalGuides).fill(0).map((_, index) => {\n      let ratio = 0;\n      ratio = ((index + 1) / 2) / numberOfHorizontalGuides;\n      const yCoordinate = (newChartHeight.chartHeight - chartHeight * ratio + padding);\n\n      return (\n        <React.Fragment key={index}>\n          <polyline\n            fill=\"none\"\n            stroke={\"#ccc\"}\n            strokeWidth=\".5\"\n            points={`${startX},${yCoordinate} ${endX},${yCoordinate}`}\n          />\n        </React.Fragment>\n      );\n    });\n  };\n\n  const HorizontalGuidesPositive = () => (\n    <HorizontalGuides chartHeight={chartHeight / 2}></HorizontalGuides>\n  );\n\n  const HorizontalGuidesNigative = () => (\n    <HorizontalGuides chartHeight={chartHeight}></HorizontalGuides>\n  );\n\n  const LabelsXAxis = () => {\n    const y = height - padding + FONT_SIZE * 2;\n\n    return data.map((element, index) => {\n      const x =\n        (element.x * 2 / maximumXFromData) * chartWidth + padding - FONT_SIZE / 2;\n      return (\n        <text\n          key={index}\n          x={x}\n          y={y}\n          style={{\n            fill: \"#fff\",\n            fontSize: FONT_SIZE,\n            fontFamily: \"Helvetica\",\n          }}\n        >\n          {element.label}\n        </text>\n      );\n    });\n  };\n\n  const LabelsYAxis = (parts) => {\n    let PARTS = numberOfHorizontalGuides;\n    let newIndex = numberOfHorizontalGuides;\n\n    if (-minimumYFromData > maximumYFromData) {\n      maximumYFromData = -minimumYFromData;\n    }\n\n    return new Array((PARTS + parts.increaseParts)).fill(0).map((_, index) => {\n      const x = FONT_SIZE;\n      const ratio = (index / 2) / numberOfHorizontalGuides;\n      const addIndex = parts.activeIndex ? newIndex-- : index;\n\n      const yCoordinate =\n        parts.newChartHeight - chartHeight * ratio + padding + FONT_SIZE / 2;\n      return (\n        <text\n          key={index}\n          x={x}\n          y={yCoordinate}\n          style={{\n            fill: \"#fff\",\n            fontSize: FONT_SIZE,\n            fontFamily: \"Helvetica\"\n          }}\n        >\n          {parts.activeIndex ? -(parseFloat(maximumYFromData * (((addIndex)) / PARTS)).toFixed(precision)) :\n            (parseFloat(maximumYFromData * (((addIndex)) / PARTS)).toFixed(precision))\n          }\n        </text>\n      );\n    });\n  };\n\n  const LabelsYAxisNegative = () => (\n    <LabelsYAxis increaseParts={0} newChartHeight={chartHeight} activeIndex={true}></LabelsYAxis>\n  );\n\n  const LabelsYAxisPositive = () => (\n    <LabelsYAxis increaseParts={1} newChartHeight={chartHeight / 2} activeIndex={false}></LabelsYAxis>\n  );\n\n  function handleZoomIn(e) {\n    setIsDisable(false);\n    svgRef.current.currentScale += .1 \n    //return (svgRef.current.width.baseVal.value += 50);\n  }\n  function handleZoomOut(e) {\n    if (svgRef.current.currentScale > 1)\n    svgRef.current.currentScale -= .1 \n     // return (svgRef.current.width.baseVal.value -= 50);\n    else {\n      setIsDisable(true);\n    }\n  }\n\n  // circle uses the same points as polyline points\n  const Circle = () => {\n    const circle = dataPoints\n      .map(element => {\n        return (\n          <circle\n            key={element.x}\n            cx={element.x ? element.x : null}\n            cy={element.y ? element.y : null}\n            r=\"4\"\n            fill=\"red\"\n            opacity='1' />\n        )\n      });\n    return circle ? circle : \"\";\n  };\n\n  return (\n    <div class=\"wrapper\">\n      <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        viewBox={`0 0 ${width * 2} ${height}`}\n        overflow=\"auto !important\"\n        ref={svgRef}\n      >\n        <XAxis />\n        <LabelsXAxis />\n        <YAxis />\n        <LabelsYAxisPositive />\n        <LabelsYAxisNegative />\n        <Circle />\n        <HorizontalGuidesPositive />\n        <HorizontalGuidesNigative />\n\n        <line x1={`${padding + FONT_SIZE}`} y1=\"0\" x2={`${padding + FONT_SIZE - 20}`} y2={`${padding + FONT_SIZE - 105}`} style={{ stroke: \"green\", strokeWidth: 5 }} />\n        <line x1={`${padding + FONT_SIZE}`} y1=\"0\" x2={`${padding + FONT_SIZE + 20}`} y2={`${padding + FONT_SIZE - 105}`} style={{ stroke: \"green\", strokeWidth: 5 }} />\n\n        <line x1={`${width * 2}`} y1={`${height - padding}`} x2={`${(width * 3) - (height - padding) - 80}`} y2={`${height - padding - 20}`} style={{ stroke: \"green\", strokeWidth: 5 }} />\n        <line x1={`${width * 2}`} y1={`${height - padding}`} x2={`${(width * 3) - (height - padding) - 80}`} y2={`${height - padding + 20}`} style={{ stroke: \"green\", strokeWidth: 5 }} />\n\n        <polyline\n          fill=\"none\"\n          stroke=\"yellow\"\n          strokeWidth='3'\n          points={points}\n        />\n      </svg>\n      <button className=\"btn btnSize zoomIn\" onClick={(e) => handleZoomIn(e)}>\n          <i className={\"fa fa-plus\"} />\n        </button>\n        <button className=\"btn btnSize zoomOut\" onClick={(e) => handleZoomOut(e)} disabled={isDisable}>\n          <i className={\"fa fa-minus\"} />\n        </button>\n    </div>\n  );\n};\n\nexport default LineChart;","import React from 'react';\nimport { useApp } from '../context/appContext';\n\nfunction SelectionYear() {\n    let { year, selectYear } = useApp();\n\n    function getYear(e) {\n        selectYear(e.target.value, e.target.options[e.target.selectedIndex].text);\n    }\n\n    const map = year.map(element => {\n        return <option key={ element.value} value={element.value}>{ element.text}</option>\n    })\n    return (\n        <div className=\"form-group\">\n            <select onChange={(e) => getYear(e)} className=\"selctionType form-control col-4 col-sm-4 col-m-4 col-lg-4\">\n            <option className=\"form-control\" key={'default'} defaultValue disabled >Select Year</option>\n                {map}\n            </select>\n        </div>\n\n    )\n}\n\nexport default SelectionYear;\n","import React from \"react\";\nimport { useApp } from \"../context/appContext\";\n\nexport const LabelX = () => {\n    const { textX } = useApp();\n    const classes = ['style']\n    return (\n        <div>\n            <span className={classes.join(' ')}>{textX}</span> \n        </div>\n    )\n};\n\nexport const LabelY = () => {\n    const { textY } = useApp();\n    const classes = ['style','labelPositionY']\n    return (\n        <div>\n            <span className={classes.join(' ')}>{textY}</span>\n        </div>\n    )\n};\n","import React from \"react\";\n\nexport default function SelectionDom(props) {\n\n    const map = props.value.map(element => {\n        return <option className=\"form-control\" key={element.value} value={element.value}>{element.text}</option>\n    });   \n\n    return (\n        <div className=\"form-group\">\n            <select onChange={(e) => props.getType(e)} className=\"selctionType form-control col-4 col-sm-4 col-m-4 col-lg-4\" aria-label=\"Default select example\">\n                {map}\n            </select>\n        </div>\n    ) \n}","import React from 'react';\nimport { useApp } from '../context/appContext';\nimport SelectionMethod from './selectionDom';\n\nfunction Selection() {\n    let { selectStaion, selectType, selectYear, stations, year, optionsData } = useApp();\n\n    function getValue(e) {\n        e.preventDefault();\n        return ({\n            targetValue: e.target.value,\n            targetText: e.target.options[e.target.selectedIndex].text\n        })\n    }\n\n    return (\n        <React.Fragment>\n            <SelectionMethod\n                value={stations}\n                getType={(e) => selectStaion(getValue(e).targetValue, getValue(e).targetText)} />\n            <SelectionMethod\n                value={optionsData}\n                getType={(e) => selectType(getValue(e).targetValue, getValue(e).targetText)} />\n            <SelectionMethod\n                value={year}\n                getType={(e) => selectYear(getValue(e).targetValue, getValue(e).targetText)} />\n        </React.Fragment>\n\n    )\n}\n\nexport default Selection;","import React from \"react\";\nimport LineChart from \"./components/lineChart\";\nimport SelectionType from \"./components/selectionType\";\nimport SelectionYear from \"./components/selectionYear\";\nimport { LabelX, LabelY } from \"./components/label\";\nimport AppContextProvider from \"./context/appContext\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\nimport SelectionStation from \"./components/selectionStation\";\nimport Selection from \"./components/selection\";\n\nfunction App() {\n  return (\n    <div className=\"m-2 chartWrapper\">\n      <AppContextProvider>\n        <div className=\"container\">\n          <div className=\"row justify-content-center\">\n            <Selection />\n            {/* <Selection stations />\n            <Selection year />\n            <Selection optionData/> */}\n            {/* <SelectionType />\n            <SelectionYear />\n            <SelectionStation /> */}\n          </div>\n          <LabelY />\n          <LineChart\n            width={700}\n            height={750}\n            horizontalGuides={5}\n            precision={2}\n          />\n          <LabelX />\n        </div>\n      </AppContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}